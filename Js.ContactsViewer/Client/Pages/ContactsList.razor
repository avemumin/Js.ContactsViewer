@page "/contacts"
@inject IContactService _contactService
@inject NavigationManager _navigationManager

<PageTitle>Kontakty</PageTitle>

<h3>Kontakty: </h3>
<div>
    <button class="btn btn-secondary" @onclick="CreateContact"><i class="oi oi-task"> Dodaj</i></button>
</div>
<table class="table table-striped">
    <thead>
        <tr>
            <th>Imię</th>
            <th>Nazwisko</th>
            <th>Email</th>
            <th>#Action#</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var contact in _contactsList)
        {
            <tr>
                <td>@contact.Name</td>
                <td>@contact.LastName</td>
                <td>@contact.Email</td>
                <td>
                    <button class="btn btn-info" @onclick="(()=> EditContact(contact.Id))"><i class="oi oi-info"></i> </button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<Contact> _contactsList = new List<Contact>();
    protected override async Task OnInitializedAsync()
    {
        await _contactService.GetContacts();
        if (_contactService.Contacts?.Any() ?? false)
        {
            _contactsList = _contactService.Contacts;
        }
    }

    void CreateContact()
    {
        _navigationManager.NavigateTo("/contact");
    }
    void EditContact(int id)
    {
        _navigationManager.NavigateTo($"/contact/{id}");
    }
}


 @*Komentarz: tutaj mamy do czynienia ze standardową lista bootstrapową bez fajerwerków
     na co należy zwrócić uwagę to wstrzyknięcia (@inject)
     dla IContactService odwołuje się do serwisu dla kontaktu poprzez interfejs
     oraz NavigationManager wewnętrzny mechanizm Blazor dla przechodzenia między stronami
     czyli nawigacją działa to tak że na referencji do NavigationManager wywołujemy metodę
     NavigateTo("wskazanyAdres") który umożliwi przejście do podanego adresu
 *@